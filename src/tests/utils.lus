node jafter (x :  bool) returns (y :  bool)
let
  y = false -> pre x;
tel

node edge (x: bool) returns (y: bool)
let
  y = false -> not pre x and x;
tel

node switch (orig,  on,  off :  bool) returns (state:  bool)
let
  assert not( on and off);
  state = orig -> if not pre state and on then true 
                  else if pre state and off then false
                       else pre state;
tel

node once_from_a_to_b(x, a, b: bool) returns( ok: bool);
var check_debut, local_ok: bool;
let
  check_debut = if a then true else false -> pre check_debut;
  local_ok = if x and check_debut then true
             else false -> pre local_ok;

  ok= true -> if b and not local_ok then false
              else pre ok;
tel