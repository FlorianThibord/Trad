(* Florian Thibord  --  Projet CERCLES *)

type ident = string

type bop =
  Op_eq | Op_neq | Op_lt | Op_le | Op_gt | Op_ge
| Op_add | Op_sub | Op_mul | Op_div | Op_mod
| Op_add_f | Op_sub_f | Op_mul_f | Op_div_f
| Op_and | Op_or | Op_xor | Op_sharp

type unop = 
  Op_not | Op_minus

type typ = 
  T_Bool 
| T_Int 
| T_Float

type value = 
  Bool of bool 
| Int of int 
| Float of float

type decl = ident * typ

type reg = ident * typ * value

type left_part = 
  LP_Ident of ident
| LP_Tuple of ident list

(* AJOUTER UN TYPE POUR METTRE EN EVIDENCE L'ATOMICITE *)
type expression =
  E_Ident of ident
| E_Tuple of expression list
| E_Value of value
| E_App of ident * expression list
| E_Bop of bop * expression * expression
| E_Unop of unop * expression
| E_If of expression * expression * expression
 
type n_equation = left_part * n_expression

type n_condition = ident * typ * n_expression

type n_node = 
  {  id: ident; 
     param_in: decl list; 
     param_out: decl list; 
     vars: decl list; 
     reg: reg list;
     pre: n_condition list;
     post: n_condition list;
     eqs: n_equation list; }

