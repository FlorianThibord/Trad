Program before normalizer:

NODE bound (a : int; x : int; b : int) RETURNS (r : int) 
VAR ; 
LET 
  r = if lt(x, a) then 
      a 
      else 
      if gt(x, b) then 
          b 
          else 
          x;  
TEL 


Program before normalizer:

NODE integr (x : int) RETURNS (y : int) 
VAR r : int; z : int; 
LET 
  ASSERT : and(le(-(256), x), le(x, 255)) ;
  y = bound(-(1024), z, 1023);
  z = add(x, r);
  r = (0) -> (pre(y));
  ASSERT : and(le(-(1024), y), le(y, 1023)) ;  
TEL 


Program normalized : 

NODE integr (x : int) RETURNS (y : int) 
VAR r : int; z : int; 
PRE : x : int & and(le(-(256), x), le(x, 255))
LET 
   r = reg__1;
   z = add(x, r);
   y = bound(-(1024), z, 1023); 
   reg__1 = REG(0, y) : int  
TEL 
POST : y : int & and(le(-(1024), y), le(y, 1023)) 

B Signature : 

MACHINE Integr 

OPERATIONS

yy <-- integr(xx) =
 PRE
    xx : INT & -256 <= xx & xx <= 255
 THEN
    yy :: { ii | ii : INT & -1024 <= yy & yy <= 1023 }
 END

